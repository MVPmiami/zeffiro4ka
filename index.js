const { Telegraf, Markup } = require('telegraf')
require('dotenv').config()
const commands = require('./const')
const imgs = require('./const')
const texts = require('./const')

const bot = new Telegraf(process.env.BOT_TOKEN)
bot.start((ctx) => {
  ctx.reply(
    `–ó–¥–æ—Ä–æ–≤–∞ ${
      ctx.message.from.first_name === '–°–µ—Ä–≥–µ–π'
        ? '–°–µ—Ä–µ–≥–∞-—Ñ–∏–¥–µ—Ä'
        : ctx.message.from.first_name
    }`,
  )
  setInterval(() => {
    ctx.replyWithHTML(`–ù—É —à–æ –æ–±—Å—É–¥–∏–º, –º–± –∫—Ç–æ –ø–æ–∫–∞—Ç–∞—Ç—å —Ö–æ—á–µ—Ç?`, {
      disable_web_page_preview: true,
    })
  }, 1800000)

  setInterval(() => {
    ctx.replyWithHTML(`–ü–∞–ª–∞–¥–∏–Ω—ã –¥–æ–ª–±—è—Ç—å—Å—è –≤ –ø–æ–ø–∫—É –∞–∑–∞–∑–∞–∑–∞`, {
      disable_web_page_preview: true,
    })
  }, 5600000)

  setInterval(() => {
    ctx.replyWithHTML(`–í—Å–µ–º –∑–¥–æ—Ä–æ–≤–∫–∏, –°–µ—Ä–µ–≥–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª —Ñ–∏–¥–∏—Ç—å?`, {
      disable_web_page_preview: true,
    })
  }, 86400000)

  setInterval(() => {
    ctx.replyWithHTML(`–ú–± –∫–æ–≥–æ –Ω–∞–¥–æ –ø–æ–∫–∞—Ä–∞—Ç—å? —è —ç—Ç–æ —É–º–µ—é –∫—Å—Ç–∞`, {
      disable_web_page_preview: true,
    })
  }, 3600000)
})
bot.help((ctx) => ctx.reply(`${commands.commands}`))
bot.on('sticker', (ctx) => ctx.reply('üëç'))
bot.hears('–ª–æ–ª', (ctx) => {
  ctx.reply(`–ë–ª—è –æ—Ä–Ω—É–ª —Ç–æ–∂–µ`)
})
bot.hears('–±—É–¥—É', (ctx) => {
  ctx.reply(`–∏–¥–µ–º –±—É—Ö–∞—Ç—å? –∏–ª–∏ —á—Ç–æ? —è —Ç—É—Ç`)
})
bot.hears('—Ö–∞—Ö', (ctx) => {
  ctx.reply(`–ø–æ—Å–º–æ—Ç—Ä–∏–º –∫—Ç–æ –ø–æ—Å–º–µ–µ—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º`)
})
bot.hears('–æ—Ä—É', (ctx) => {
  ctx.reply(`—Ç–æ–∂–µ –∫–µ–∫–Ω—É–ª –±—Ä–æ`)
})
bot.hears('–æ—Ä—É)', (ctx) => {
  ctx.reply(`–ª—é–¥–∏ —Ç–∞–∫–∏–µ —Ç—É–ø—ã–µ —Ö–∞—Ö`)
})
bot.hears('–∞—Ö–∞—Ö', (ctx) => {
  ctx.reply(`–ø–æ—Å–º–æ—Ç—Ä–∏–º –∫—Ç–æ –ø–æ—Å–º–µ–µ—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º`)
})
bot.hears('–∞—Ö–∞—Ö–∞', (ctx) => {
  ctx.reply(`–ø–æ—Å–º–æ—Ç—Ä–∏–º –∫—Ç–æ –ø–æ—Å–º–µ–µ—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º`)
})
bot.hears('—ç—Ç –¥–∞', (ctx) => {
  ctx.reply(`—Ö—É–π –Ω–∞`)
})
bot.hears('—ç—Ç–æ –¥–∞', (ctx) => {
  ctx.reply(`—Ö—É–π –Ω–∞`)
})
bot.hears('–∫–µ–∫', (ctx) => {
  ctx.reply(`–∞—Ö–∞—Ö–∞ –≤—Ç—Ñ XD`)
})
bot.hears('—Ä–æ—Ñ–ª', (ctx) => {
  ctx.reply(`–ø—ã—Ä—Å–Ω—É–ª –∫–æ–≥–¥–∞ –ø—Ä–æ–æ—Ä–∞–ª—Å—è`)
})
bot.hears('–ø–∑–¥—Ü', (ctx) => {
  ctx.reply(`–∞–π –≤–ø–∏–∑–¥—É —ç—Ç—É —Ö—É–π–Ω—é —Å–æ–≥–ª—ã`)
})
bot.hears('–≥–æ—Ä–∏—Ç –∂–æ–ø–∞', (ctx) => {
  ctx.reply(`—Ä–æ–≤–Ω—è–π —Ä—É–∫–∏ –ø—Ä–æ—Å—Ç –ø—Ñ—Ñ—Ñ`)
})
bot.hears('–∫–∞–∫ –∂–µ –≥–æ—Ä–∏—Ç –∂–æ–ø–∞', (ctx) => {
  ctx.reply(`–ø–æ—Ö–æ–∂–µ –ø—Ä–∏—á–∏–Ω–∞ –≤ —Ç–µ–±–µ –º–æ–π –¥—Ä—É–≥`)
})
bot.hears('—è –∑–Ω–∞—é', (ctx) => {
  ctx.reply(`–æ–π –Ω–µ –ø–∏–∑–¥–∏, –∑–Ω–∞–µ—Ç –æ–Ω...`)
})
bot.hears('–∑–∞—Ö–æ–∂—É', (ctx) => {
  ctx.reply(`—è —É–∂–µ –≤–æ—à–µ–ª –≤ —Ç–≤–æ—é –º–∞–º–∫—É –∫–∞–∫-—Ç–æ —Ä–∞–∑`)
})
bot.hears('—è –≤ –≤–æ–π—Å–µ', (ctx) => {
  ctx.reply(`–∞ —è –≤ —Ç–≤–æ–µ–π –º–∞–º–∫–µ –∞—Ö–∞—Ö–∞—Ö`)
})
bot.hears('–¥–∞', (ctx) => {
  ctx.reply(`—Ö—É–π –Ω–∞`)
})
bot.hears('–¥–µ—Ä–∂–∏ –¥–≤–∞', (ctx) => {
  ctx.reply(`–¥–µ—Ä–∂–∏ —Ç—Ä–∏`)
})
bot.hears('300', (ctx) => {
  ctx.reply(`–æ—Å—Ç–æ—Å–∏ —É —Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–∞`)
})
bot.hears('—Ç—Ä–∏—Å—Ç–∞', (ctx) => {
  ctx.reply(`–æ—Å—Ç–æ—Å–∏ —É —Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–∞`)
})
bot.hears('—Ç—Ä–∏—Å—Ç–æ', (ctx) => {
  ctx.reply(`–æ—Å—Ç–æ—Å–∏ —É —Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–∞`)
})
bot.hears('–Ω–µ—Ç', (ctx) => {
  ctx.reply(`–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç`)
})
bot.hears('–∑–¥–æ—Ä–æ–≤', (ctx) =>
  ctx.reply(
    `–ó–¥–æ—Ä–æ–≤–∞ ${
      ctx.message.from.first_name === '–°–µ—Ä–≥–µ–π'
        ? '–°–µ—Ä–µ–≥–∞-—Ñ–∏–¥–µ—Ä'
        : ctx.message.from.first_name
    }`,
  ),
)
bot.command('punish', (ctx) => {
  ctx.replyWithHTML(
    '<b>–ù–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–≥–æ –ø–æ–∫–∞—Ä–∞—Ç—å —Å—É–∫!</b>',
    Markup.inlineKeyboard([
      [Markup.button.callback('–õ–µ—Ö—É', 'btn_1')],
      [Markup.button.callback('–°–µ—Ä–µ–∂—É', 'btn_2')],
      [Markup.button.callback('–ò–≥–æ—Ä—è', 'btn_3')],
      [Markup.button.callback('–í–æ–≤–∞–Ω–∞', 'btn_4')],
    ]),
  )
})

const randomImg = (imgs) => {
  const arr = imgs.imgs
  const rand = Math.floor(Math.random() * arr.length)
  const rValue = arr[rand]
  console.log(rValue)
  return rValue
}

const punishFunc = (name, imgs) => {
  bot.action(name, async (ctx) => {
    try {
      await ctx.answerCbQuery()
      if (name === 'btn_1') {
        await ctx.replyWithPhoto({
          source: './img/Lexa.jpg',
        })
        await ctx.replyWithHTML(texts.text[0], {
          disable_web_page_preview: true,
        })
      } else {
        let src = randomImg(imgs)
        let firstName = ''
        if (name === 'btn_2') {
          firstName = '–°–µ—Ä–µ–∂–∞'
        }
        if (name === 'btn_3') {
          firstName = '–ò–≥–æ—Ä—å'
        }
        if (name === 'btn_4') {
          firstName = '–í–æ–≤–∞–Ω'
        }
        await ctx.replyWithPhoto({
          source: src,
        })
        if (src === './img/falos.jpg') {
          await ctx.replyWithHTML(`${firstName} ${texts.text[1]}`, {
            disable_web_page_preview: true,
          })
        } else if (src === './img/Pinok.jpg') {
          await ctx.replyWithHTML(`${firstName} ${texts.text[2]}`, {
            disable_web_page_preview: true,
          })
        } else if (src === './img/podzatilnik.jpg') {
          await ctx.replyWithHTML(`${firstName} ${texts.text[3]}`, {
            disable_web_page_preview: true,
          })
        } else if (src === './img/rasstrel.jpg') {
          await ctx.replyWithHTML(`${firstName} ${texts.text[4]}`, {
            disable_web_page_preview: true,
          })
        }
      }
    } catch (error) {
      console.log(error)
      await ctx.replyWithHTML('–ë–ª—è—Ç—å —è —Å–ª–æ–º–∞–ª—Å—è', {
        disable_web_page_preview: true,
      })
    }
  })
}

punishFunc('btn_1', imgs)
punishFunc('btn_2', imgs)
punishFunc('btn_3', imgs)
punishFunc('btn_4', imgs)

bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
